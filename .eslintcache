[{"C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\index.js":"1","C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\App.js":"2","C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\reportWebVitals.js":"3","C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\reducers\\index.js":"4","C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\reducers\\initial.js":"5","C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\reducers\\player.js":"6","C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\views\\index\\index.js":"7","C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\views\\player\\index.js":"8","C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\views\\index\\SongItem.js":"9","C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\actions\\index.js":"10"},{"size":979,"mtime":1608660325551,"results":"11","hashOfConfig":"12"},{"size":607,"mtime":1608268892534,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":119,"mtime":1608333694964,"results":"15","hashOfConfig":"12"},{"size":166,"mtime":1608249314649,"results":"16","hashOfConfig":"12"},{"size":560,"mtime":1608344033953,"results":"17","hashOfConfig":"12"},{"size":3268,"mtime":1608337951710,"results":"18","hashOfConfig":"12"},{"size":1861,"mtime":1608344795427,"results":"19","hashOfConfig":"12"},{"size":985,"mtime":1608337448199,"results":"20","hashOfConfig":"12"},{"size":2064,"mtime":1608343940548,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"188ef5o",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\index.js",[],["47","48"],"C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\App.js",[],"C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\reportWebVitals.js",[],"C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\reducers\\index.js",[],"C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\reducers\\initial.js",[],"C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\reducers\\player.js",[],"C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\views\\index\\index.js",["49"],"import React, {Component} from 'react';\r\nimport { connect} from 'react-redux';\r\nimport { bindActionCreators} from 'redux';\r\nimport Spinner from 'react-spinkit';\r\nimport {checkSignIn, search} from '../../actions';\r\nimport SongItem from './SongItem';\r\nimport './index.css';\r\nimport 'materialize-css/dist/css/materialize.min.css'\r\n\r\nclass Index extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            song: ''\r\n        }\r\n        this.getResultsCard = this.getResultsCard.bind(this);\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.props.checkSignIn();\r\n    }\r\n\r\n    getTokenPath(){\r\n        let path = window.location.href;\r\n        return path.substring(path.indexOf('#'), path.length);\r\n    }\r\n    getResultsCard(){\r\n        const {songs} = this.props;\r\n        if(songs.length > 0){\r\n            return(\r\n                <div className='card'>\r\n                    <div className='card-content'>\r\n                    {\r\n                        songs.map((currentValue, index) => {\r\n                            return(\r\n                                <SongItem \r\n                                key={index}\r\n                                songId={currentValue.id}\r\n                                tokenPath={this.getTokenPath()}\r\n                                albumPhoto={currentValue.album.images[0].url}\r\n                                albumName={currentValue.album.name}\r\n                                songName={currentValue.name}\r\n                                artistName={currentValue.artists[0].name}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                    </div>\r\n                \r\n                </div>\r\n            )\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    render() {\r\n\r\n        const { song} = this.state;\r\n        const {songs} = this.props;\r\n\r\n        if(songs.type === \"IS_FETCHING\"){\r\n            return <Spinner name='double-bounce'/>\r\n        }\r\n        return(\r\n            <div className='Index'>\r\n                <div className='card'>\r\n                    <div className='card-content'>\r\n                        <div className='Index-searchBox'>\r\n                        <input\r\n                            type='text'\r\n                            className='Index-searchBox-input'\r\n                            placeholder='Cancion'\r\n                            onChange={(e) => {this.setState({song: e.target.value})}}\r\n                            value={song}\r\n                        />\r\n                        <a className='waves-effect waves-light btn green' onClick={(e) => this.props.search(song)}>\r\n                            <i className='fa fa-search'></i>\r\n                        </a>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </div>\r\n                { this.getResultsCard() }\r\n            </div>\r\n        );\r\n    }\r\n}\r\nfunction mapStateToProps(state){\r\n    return{\r\n        routes: state.routes,\r\n        songs: state.player\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch){\r\n    return bindActionCreators({\r\n        checkSignIn, search\r\n\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Index);","C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\views\\player\\index.js",["50"],"import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {playTrack, checkSignIn} from '../../actions';\r\nimport './index.css';\r\n\r\n\r\nclass Player extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            songId: this.props.match.params.songId\r\n        }\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.props.checkSignIn();\r\n        this.props.playTrack(this.state.songId);\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const {player} = this.props;\r\n        if (player.type === 'COMPLETE_SONG'){\r\n\r\n            return(\r\n                <div className='Player'>\r\n                    <div className='card'>\r\n                        <div className='card-content Player-box'>\r\n                            <div className='Player-left'>\r\n                                <img src={player.payload.album.images[0].url}/>\r\n                            </div>\r\n                            <div className='Player-right'>\r\n                                <audio controls>\r\n                                    <source src={player.payload.preview_url}/>\r\n                                </audio>\r\n                                <h4>{player.payload.name}</h4>\r\n                                <h6>{player.payload.artists[0].name}</h6>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return <div></div>;\r\n\r\n        \r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        routes: state.routes,\r\n        player: state.player\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch){\r\n    return bindActionCreators({\r\n        checkSignIn,\r\n        playTrack\r\n    }, dispatch)\r\n\r\n}\r\n\r\nexport default  connect(mapStateToProps, mapDispatchToProps)(Player);","C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\views\\index\\SongItem.js",["51"],"import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from 'react-router-dom';\r\nimport './index.css';\r\n\r\n\r\nclass SongItem extends Component {\r\n    render(){\r\n        const {songName, tokenPath, albumPhoto, artistName, songId} = this.props;\r\n        return(\r\n            <div className='SongItem'>\r\n                <Link to={'player/' + songId + tokenPath}>\r\n                    <div className='SongItem-photo'>\r\n                        <img src={albumPhoto}/>\r\n                    </div>\r\n                    <div className='SongItem-info'>\r\n                        <h2>{songName}</h2>\r\n                        <h3>{artistName}</h3>\r\n                    </div>\r\n                </Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nSongItem.propTypes = {\r\n    songId: PropTypes.string,\r\n    tokenPath:PropTypes.string,\r\n    albumPhoto: PropTypes.string,\r\n    songName: PropTypes.string,\r\n    artistName: PropTypes.string\r\n}\r\nexport default SongItem; ","C:\\Users\\comp\\Desktop\\PROYECTOS\\SPOTIFY\\spotify\\src\\actions\\index.js",[],["52","53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":77,"column":25,"nodeType":"60","endLine":77,"endColumn":116},{"ruleId":"61","severity":1,"message":"62","line":33,"column":33,"nodeType":"60","endLine":33,"endColumn":80},{"ruleId":"61","severity":1,"message":"62","line":14,"column":25,"nodeType":"60","endLine":14,"endColumn":48},{"ruleId":"54","replacedBy":"63"},{"ruleId":"56","replacedBy":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["65"],["66"],"no-global-assign","no-unsafe-negation"]